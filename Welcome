
Dell@DESKTOP-FLTGD12 MINGW64 ~/Desktop/DevOps (mca2)
$ cd ..

Dell@DESKTOP-FLTGD12 MINGW64 ~/Desktop (master)
$ git branch f1
fatal: not a valid object name: 'master'

Dell@DESKTOP-FLTGD12 MINGW64 ~/Desktop (master)
$ cd Desktop
bash: cd: Desktop: No such file or directory

Dell@DESKTOP-FLTGD12 MINGW64 ~/Desktop (master)
$ cd DevOps

Dell@DESKTOP-FLTGD12 MINGW64 ~/Desktop/DevOps (mca2)
$ git branch f1

Dell@DESKTOP-FLTGD12 MINGW64 ~/Desktop/DevOps (mca2)
$ git checkout f1
Switched to branch 'f1'
M       dev1

Dell@DESKTOP-FLTGD12 MINGW64 ~/Desktop/DevOps (f1)
$ git config --list
diff.astextplain.textconv=astextplain
filter.lfs.clean=git-lfs clean -- %f
filter.lfs.smudge=git-lfs smudge -- %f
filter.lfs.process=git-lfs filter-process
filter.lfs.required=true
http.sslbackend=openssl
http.sslcainfo=C:/Program Files/Git/mingw64/etc/ssl/certs/ca-bundle.crt
core.autocrlf=true
core.fscache=true
core.symlinks=false
pull.rebase=false
credential.helper=manager
credential.https://dev.azure.com.usehttppath=true
init.defaultbranch=master
user.name=sushmitha
user.email=sushmitha.karaba@gmail.com
core.repositoryformatversion=0
core.filemode=false
core.bare=false
core.logallrefupdates=true
core.symlinks=false
core.ignorecase=true
remote.origin.url=https://github.com/Sushmitakaraba/Demo.git
remote.origin.fetch=+refs/heads/*:refs/remotes/origin/*
branch.branch1.remote=origin

Dell@DESKTOP-FLTGD12 MINGW64 ~/Desktop/DevOps (f1)
$

Dell@DESKTOP-FLTGD12 MINGW64 ~/Desktop/DevOps (f1)
$ git remote add origin "https://github.com/Sushmitakaraba/Demo.git"
error: remote origin already exists.

Dell@DESKTOP-FLTGD12 MINGW64 ~/Desktop/DevOps (f1)
$ git pull origin main
From https://github.com/Sushmitakaraba/Demo
 * branch            main       -> FETCH_HEAD
Auto-merging s1.txt
CONFLICT (content): Merge conflict in s1.txt
Automatic merge failed; fix conflicts and then commit the result.

Dell@DESKTOP-FLTGD12 MINGW64 ~/Desktop/DevOps (f1|MERGING)
$ git mergetool

This message is displayed because 'merge.tool' is not configured.
See 'git mergetool --tool-help' or 'git help config' for more details.
'git mergetool' will now attempt to use one of the following tools:
opendiff kdiff3 tkdiff xxdiff meld tortoisemerge gvimdiff diffuse diffmerge ecmerge p4merge araxis bc codecompare smerge emerge vimdiff nvimdiff
Merging:
s1.txt

Normal merge conflict for 's1.txt':
  {local}: modified file
  {remote}: modified file
Hit return to start merge resolution tool (vimdiff):
4 files to edit

Dell@DESKTOP-FLTGD12 MINGW64 ~/Desktop/DevOps (f1|MERGING)
$ cat s1.txt
MSRIT

Welcome
=======
modified by dev2


Dell@DESKTOP-FLTGD12 MINGW64 ~/Desktop/DevOps (f1|MERGING)
$ git push origin main
To https://github.com/Sushmitakaraba/Demo.git
 ! [rejected]        main -> main (non-fast-forward)
error: failed to push some refs to 'https://github.com/Sushmitakaraba/Demo.git'
hint: Updates were rejected because a pushed branch tip is behind its remote
hint: counterpart. If you want to integrate the remote changes, use 'git pull'
hint: before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.

Dell@DESKTOP-FLTGD12 MINGW64 ~/Desktop/DevOps (f1|MERGING)
$ git mergetool

This message is displayed because 'merge.tool' is not configured.
See 'git mergetool --tool-help' or 'git help config' for more details.
'git mergetool' will now attempt to use one of the following tools:
opendiff kdiff3 tkdiff xxdiff meld tortoisemerge gvimdiff diffuse diffmerge ecmerge p4merge araxis bc codecompare smerge emerge vimdiff nvimdiff
No files need merging

Dell@DESKTOP-FLTGD12 MINGW64 ~/Desktop/DevOps (f1|MERGING)
$ git merge --remote
error: unknown option `remote'
usage: git merge [<options>] [<commit>...]
   or: git merge --abort
   or: git merge --continue

    -n                    do not show a diffstat at the end of the merge
    --[no-]stat           show a diffstat at the end of the merge
    --[no-]summary        (synonym to --stat)
    --[no-]log[=<n>]      add (at most <n>) entries from shortlog to merge commit message
    --[no-]squash         create a single commit instead of doing a merge
    --[no-]commit         perform a commit if the merge succeeds (default)
    -e, --[no-]edit       edit message before committing
    --[no-]cleanup <mode> how to strip spaces and #comments from message
    --[no-]ff             allow fast-forward (default)
    --ff-only             abort if fast-forward is not possible
    --[no-]rerere-autoupdate
                          update the index with reused conflict resolution if possible
    --[no-]verify-signatures
                          verify that the named commit has a valid GPG signature
    -s, --[no-]strategy <strategy>
                          merge strategy to use
    -X, --[no-]strategy-option <option=value>
                          option for selected merge strategy
    -m, --[no-]message <message>
                          merge commit message (for a non-fast-forward merge)
    -F, --file <path>     read message from file
    --[no-]into-name <name>
                          use <name> instead of the real target
    -v, --[no-]verbose    be more verbose
    -q, --[no-]quiet      be more quiet
    --[no-]abort          abort the current in-progress merge
    --[no-]quit           --abort but leave index and working tree alone
    --[no-]continue       continue the current in-progress merge
    --[no-]allow-unrelated-histories
                          allow merging unrelated histories
    --[no-]progress       force progress reporting
    -S, --[no-]gpg-sign[=<key-id>]
                          GPG sign commit
    --[no-]autostash      automatically stash/stash pop before and after
    --[no-]overwrite-ignore
                          update ignored files (default)
    --[no-]signoff        add a Signed-off-by trailer
    --no-verify           bypass pre-merge-commit and commit-msg hooks
    --verify              opposite of --no-verify


Dell@DESKTOP-FLTGD12 MINGW64 ~/Desktop/DevOps (f1|MERGING)
$ git merge --abort

Dell@DESKTOP-FLTGD12 MINGW64 ~/Desktop/DevOps (f1)
$ git pull origin main
From https://github.com/Sushmitakaraba/Demo
 * branch            main       -> FETCH_HEAD
Auto-merging s1.txt
CONFLICT (content): Merge conflict in s1.txt
Automatic merge failed; fix conflicts and then commit the result.

Dell@DESKTOP-FLTGD12 MINGW64 ~/Desktop/DevOps (f1|MERGING)
$ git add .

Dell@DESKTOP-FLTGD12 MINGW64 ~/Desktop/DevOps (f1|MERGING)
$ git merge --abort

Dell@DESKTOP-FLTGD12 MINGW64 ~/Desktop/DevOps (f1)
$ git add .

Dell@DESKTOP-FLTGD12 MINGW64 ~/Desktop/DevOps (f1)
$ git commit -m "added"
On branch f1
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
  (commit or discard the untracked or modified content in submodules)
        modified:   dev1 (modified content, untracked content)

no changes added to commit (use "git add" and/or "git commit -a")

Dell@DESKTOP-FLTGD12 MINGW64 ~/Desktop/DevOps (f1)
$ git commit -a
On branch f1
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
  (commit or discard the untracked or modified content in submodules)
        modified:   dev1 (modified content, untracked content)

no changes added to commit (use "git add" and/or "git commit -a")

Dell@DESKTOP-FLTGD12 MINGW64 ~/Desktop/DevOps (f1)
$ git status
On branch f1
Changes not staged for commit:
  (use "git add/rm <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
  (commit or discard the untracked or modified content in submodules)
        modified:   dev1 (modified content, untracked content)
        deleted:    s1.txt

no changes added to commit (use "git add" and/or "git commit -a")

Dell@DESKTOP-FLTGD12 MINGW64 ~/Desktop/DevOps (f1)
$ git pull origin main
From https://github.com/Sushmitakaraba/Demo
 * branch            main       -> FETCH_HEAD
Auto-merging s1.txt
CONFLICT (content): Merge conflict in s1.txt
Automatic merge failed; fix conflicts and then commit the result.

Dell@DESKTOP-FLTGD12 MINGW64 ~/Desktop/DevOps (f1|MERGING)
$ git mergetool

This message is displayed because 'merge.tool' is not configured.
See 'git mergetool --tool-help' or 'git help config' for more details.
'git mergetool' will now attempt to use one of the following tools:
opendiff kdiff3 tkdiff xxdiff meld tortoisemerge gvimdiff diffuse diffmerge ecmerge p4merge araxis bc codecompare smerge emerge vimdiff nvimdiff
Merging:
s1.txt

Normal merge conflict for 's1.txt':
  {local}: modified file
  {remote}: modified file
Hit return to start merge resolution tool (vimdiff):
4 files to edit

Dell@DESKTOP-FLTGD12 MINGW64 ~/Desktop/DevOps (f1|MERGING)
$ cat s1.txt
MSRIT
modified by dev2


Dell@DESKTOP-FLTGD12 MINGW64 ~/Desktop/DevOps (f1|MERGING)
$ cat >> s3.txt
To MSRIT


Dell@DESKTOP-FLTGD12 MINGW64 ~/Desktop/DevOps (f1|MERGING)
$ cat s3.txt
hai
Hello
Welcome



Dell@DESKTOP-FLTGD12 MINGW64 ~/Desktop/DevOps (f1|MERGING)
$ git add .
warning: in the working copy of 's3.txt', LF will be replaced by CRLF the next time Git touches it

Dell@DESKTOP-FLTGD12 MINGW64 ~/Desktop/DevOps (f1|MERGING)
$ git commit -m "modified s3"
[f1 6ebe9a5] modified s3

Dell@DESKTOP-FLTGD12 MINGW64 ~/Desktop/DevOps (f1)
$ git status
On branch f1
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
  (commit or discard the untracked or modified content in submodules)
        modified:   dev1 (modified content, untracked content)

no changes added to commit (use "git add" and/or "git commit -a")

Dell@DESKTOP-FLTGD12 MINGW64 ~/Desktop/DevOps (f1)
$ cat s3.txt
hai
Hello
Welcome



Dell@DESKTOP-FLTGD12 MINGW64 ~/Desktop/DevOps (f1)
$ git status
On branch f1
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
  (commit or discard the untracked or modified content in submodules)
        modified:   dev1 (modified content, untracked content)

no changes added to commit (use "git add" and/or "git commit -a")

Dell@DESKTOP-FLTGD12 MINGW64 ~/Desktop/DevOps (f1)
$ cat s3.txt
hai
Hello
Welcome



Dell@DESKTOP-FLTGD12 MINGW64 ~/Desktop/DevOps (f1)
$ cat >> f3.txt
MSRIT


Dell@DESKTOP-FLTGD12 MINGW64 ~/Desktop/DevOps (f1)
$ git add .
warning: in the working copy of 'f3.txt', LF will be replaced by CRLF the next time Git touches it

Dell@DESKTOP-FLTGD12 MINGW64 ~/Desktop/DevOps (f1)
$ git commit -m "modified f3"
[f1 22aafba] modified f3
 1 file changed, 1 insertion(+)

Dell@DESKTOP-FLTGD12 MINGW64 ~/Desktop/DevOps (f1)
$ git status
On branch f1
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
  (commit or discard the untracked or modified content in submodules)
        modified:   dev1 (modified content, untracked content)

no changes added to commit (use "git add" and/or "git commit -a")

Dell@DESKTOP-FLTGD12 MINGW64 ~/Desktop/DevOps (f1)
$ cat f3.txt
Welcome
MSRIT

Dell@DESKTOP-FLTGD12 MINGW64 ~/Desktop/DevOps (f1)
$ git push origin main
To https://github.com/Sushmitakaraba/Demo.git
 ! [rejected]        main -> main (non-fast-forward)
error: failed to push some refs to 'https://github.com/Sushmitakaraba/Demo.git'
hint: Updates were rejected because a pushed branch tip is behind its remote
hint: counterpart. If you want to integrate the remote changes, use 'git pull'
hint: before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.

Dell@DESKTOP-FLTGD12 MINGW64 ~/Desktop/DevOps (f1)
$ git push origin f1
Enumerating objects: 31, done.
Counting objects: 100% (30/30), done.
Delta compression using up to 4 threads
Compressing objects: 100% (17/17), done.
Writing objects: 100% (25/25), 2.17 KiB | 1.09 MiB/s, done.
Total 25 (delta 6), reused 0 (delta 0), pack-reused 0
remote: Resolving deltas: 100% (6/6), done.
remote:
remote: Create a pull request for 'f1' on GitHub by visiting:
remote:      https://github.com/Sushmitakaraba/Demo/pull/new/f1
remote:
To https://github.com/Sushmitakaraba/Demo.git
 * [new branch]      f1 -> f1

Dell@DESKTOP-FLTGD12 MINGW64 ~/Desktop/DevOps (f1)
$
